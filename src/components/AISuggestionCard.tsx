
import React from 'react';
import { Card, CardContent } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { useToast } from '@/components/ui/use-toast';
import AIContentBadge from './AIContentBadge';
import { CheckCircle, Copy } from 'lucide-react';
import { motion } from 'framer-motion';

interface AISuggestionCardProps {
  title: string;
  description: string;
  type: 'tip' | 'script';
  onApply?: (title: string, description: string, type: 'tip' | 'script') => void;
  isApplied?: boolean;
}

const AISuggestionCard = ({ title, description, type, onApply, isApplied = false }: AISuggestionCardProps) => {
  const { toast } = useToast();
  const isScript = type === 'script';
  
  const handleApply = () => {
    if (onApply) {
      onApply(title, description, type);
    } else {
      // Fallback behavior if no handler provided
      if (isScript) {
        // Copy to clipboard for scripts
        navigator.clipboard.writeText(description)
          .then(() => {
            toast({
              title: "Script Copied!",
              description: "Script has been copied to your clipboard",
            });
          })
          .catch(err => {
            console.error("Failed to copy text: ", err);
            toast({
              title: "Copy failed",
              description: "Please try selecting and copying the text manually",
              variant: "destructive",
            });
          });
      } else {
        toast({
          title: "Tip Noted",
          description: "This tip has been noted for your practice sessions",
        });
      }
    }
  };

  const handleCopyScript = (e: React.MouseEvent) => {
    e.stopPropagation();
    navigator.clipboard.writeText(description)
      .then(() => {
        toast({
          title: "Copied!",
          description: "Script copied to clipboard",
        });
      })
      .catch(err => {
        console.error("Failed to copy:", err);
        toast({
          title: "Copy failed",
          description: "Please try again",
          variant: "destructive",
        });
      });
  };
  
  return (
    <motion.div
      whileHover={{ scale: 1.02 }}
      transition={{ type: "spring", stiffness: 300 }}
    >
      <Card className={`overflow-hidden relative transition-all duration-200 ${
        isApplied 
          ? isScript ? 'border-purple-400 bg-purple-50/50' : 'border-green-400 bg-green-50/50'
          : isScript ? 'border-purple-300 hover:border-purple-400' : 'border-brand-blue hover:border-brand-blue/70'
      }`}>
        <div className={`h-2 ${
          isApplied
            ? isScript ? 'bg-purple-600' : 'bg-green-600'
            : isScript ? 'bg-purple-500' : 'bg-brand-blue'
        }`}></div>
        <AIContentBadge 
          type="icon" 
          position="top-right"
          tooltipContent={isScript ? "This sales script was generated by AI" : "This sales tip was generated by AI"}
        />
        <CardContent className="p-6">
          <div className="flex justify-between items-start mb-4">
            <h3 className="font-medium text-lg text-brand-dark flex items-center gap-2">
              {title}
              {isApplied && (
                <CheckCircle className="h-5 w-5 text-green-600" />
              )}
            </h3>
            <span className={`text-xs px-2 py-1 rounded-full ${
              isApplied
                ? isScript ? 'bg-purple-200 text-purple-800' : 'bg-green-200 text-green-800'
                : isScript ? 'bg-purple-100 text-purple-700' : 'bg-brand-blue/30 text-blue-700'
            }`}>
              {isScript ? 'Script' : 'Tip'}
            </span>
          </div>
          <p className="text-brand-dark/70 mb-4 text-sm">
            {description}
          </p>
          <div className="flex justify-between items-center">
            <div className="flex gap-2">
              <Button 
                variant={isApplied ? "secondary" : "ghost"}
                size="sm" 
                className={`text-xs transition-all ${
                  isApplied
                    ? isScript 
                      ? 'bg-purple-200 text-purple-800 hover:bg-purple-300' 
                      : 'bg-green-200 text-green-800 hover:bg-green-300'
                    : isScript 
                      ? 'text-purple-700 hover:bg-purple-100' 
                      : 'text-blue-700 hover:bg-brand-blue/20'
                }`}
                onClick={handleApply}
              >
                {isApplied 
                  ? (isScript ? '✓ Script Active' : '✓ Tip Applied')
                  : (isScript ? 'Use Script' : 'Apply Tip')
                }
              </Button>
              {isScript && (
                <Button
                  variant="ghost"
                  size="sm"
                  className="text-xs text-gray-600 hover:text-gray-800"
                  onClick={handleCopyScript}
                >
                  <Copy className="h-3 w-3" />
                </Button>
              )}
            </div>
            {isApplied && (
              <span className="text-xs text-muted-foreground">
                {isScript ? 'In your library' : 'Ready to use'}
              </span>
            )}
          </div>
        </CardContent>
      </Card>
    </motion.div>
  );
};

export default AISuggestionCard;
